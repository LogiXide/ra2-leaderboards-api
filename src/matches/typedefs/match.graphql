type Match {
  id: Int!
  type: String!
  winner: String
  homePlayerId: Int
  homePlayer: Player
  homeTeamId: Int
  homeTeam: Team
  awayPlayerId: Int
  awayPlayer: Player
  awayTeamId: Int
  awayTeam: Team
  createdAt: String!
  updatedAt: String!

  games: [Game]
}

input CreateMatchInput {
  type: String!
  winner: String
  homePlayerId: Int
  homeTeamId: Int
  awayPlayerId: Int
  awayTeamId: Int
}

input UpdateMatchInput {
  winner: String
  homePlayerId: Int
  homeTeamId: Int
  awayPlayerId: Int
  awayTeamId: Int
}

type CreateMatchResponse {
  matches: [Match!]!
}

type UpdateMatchResponse {
  matches: [Match!]
}

type Mutation {
  createMatch(input: CreateMatchInput!): CreateMatchResponse!
  updateMatch(id: Int!, input: UpdateMatchInput!): UpdateMatchResponse!
}
